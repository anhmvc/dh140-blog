{
  
    
        "post0": {
            "title": "Shakespeare play from Week 6",
            "content": "&gt; &quot;This is assignment 7 from DH 140 with Professor Benjamin Winjum at UCLA for Winter Quarter 2022. It employs methods to run analysis on the play and output some exploratory analysis. The second part of the assignment look at a test dataset to introduce how to employ a Linear Regression model using the dataframes provided and ways to select a good feature for model training.&quot; - toc:true - branch: main - badges: true - comments: true - author: Anh Mac - categories: [fastpages, jupyter, Shakespeare, machinelearning] . import nltk from nltk.tokenize import word_tokenize, sent_tokenize nltk.download(&#39;punkt&#39;) . [nltk_data] Downloading package punkt to /home/jovyan/nltk_data... [nltk_data] Package punkt is already up-to-date! . True . f = open(&quot;romeo-and-juliet.txt&quot;, &quot;r&quot;) text = f.read() . Tokenize words . sent = sent_tokenize(text) print(word_tokenize(sent[1])) . [&#39;ACT&#39;, &#39;I&#39;, &#39;Scene&#39;, &#39;I&#39;, &#39;.&#39;] . words = [] for s in sent: for w in word_tokenize(s): words.append(w) . Remove stopwords . from nltk.corpus import stopwords from string import punctuation nltk.download(&#39;stopwords&#39;) . [nltk_data] Downloading package stopwords to /home/jovyan/nltk_data... [nltk_data] Package stopwords is already up-to-date! . True . myStopWords = list(punctuation) + stopwords.words(&#39;english&#39;) + [&#39;’&#39;] wordsNoStop = [w for w in words if w not in myStopWords] . Stem the words . from nltk.stem.lancaster import LancasterStemmer . wordLancasterStems = [LancasterStemmer().stem(w) for w in wordsNoStop] . Calculate frequencies . import collections . wordCount = collections.Counter(wordLancasterStems) . frequencies = wordCount.most_common() frequencies[0:5] . [(&#39;i&#39;, 647), (&#39;romeo&#39;, 314), (&#39;thou&#39;, 278), (&#39;and&#39;, 253), (&#39;the&#39;, 230)] . Calculate mean/median/mode/trimmed mean . import pandas as pd . df = pd.DataFrame(frequencies, columns=[&quot;text&quot;, &quot;frequency&quot;]) . print(&quot;MEAN: &quot;, df[&quot;frequency&quot;].mean()) print(&quot;MEDIAN:&quot;, df[&quot;frequency&quot;].median()) print(&quot;MODE: &quot;, df[&quot;frequency&quot;].mode()) . MEAN: 6.188932547478716 MEDIAN: 2.0 MODE: 0 1 dtype: int64 . df2 = df.sort_values(by=&quot;frequency&quot;,ignore_index=True).copy() df2 . text frequency . 0 newslet | 1 | . 1 tit | 1 | . 2 wheel | 1 | . 3 dank | 1 | . 4 upfil | 1 | . ... ... | ... | . 3049 the | 230 | . 3050 and | 253 | . 3051 thou | 278 | . 3052 romeo | 314 | . 3053 i | 647 | . 3054 rows × 2 columns . I chose to trim 20% of the data since the outliers look like it&#39;s only the higher numbers like 314 and 647, and there also seems to be a lot of 1&#39;s, so remove some would not skewed our data too much. I mostly want to remove the higher outliers. . print(&quot;TRIMMED MEAN:&quot;, df2.loc[int(0.2*3053):int(0.8*3053),&#39;frequency&#39;].mean()) . TRIMMED MEAN: 2.0845608292416804 . Histogram . df[&quot;frequency&quot;].plot.hist(title=&#39;Words frequencies in Romeo &amp; Juliet&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Words frequencies in Romeo &amp; Juliet&#39;}, ylabel=&#39;Frequency&#39;&gt; . Comment on histogram: . Most of the values are 1, so the Mode being 1 makes sense. | Median of 2 also makes sense as most of the data seems to be between 0-50, and as we can see from a preview of the dataframe that most of these numbers would be between 1-2, and the middle number should be around there as well. | The original mean of 6.188932547478716 seems a bit high when looking at the distribution, so our trimmed mean of 2.0845608292416804 seems to make more sense with the outliers above 300 removed. | . Standard Deviation &amp; Interquartile range . print(&quot;STD: &quot;, df[&quot;frequency&quot;].std()) . STD: 19.957504689286747 . df[&quot;frequency&quot;].quantile(0.75) - df[&quot;frequency&quot;].quantile(0.25) . 3.0 . Comment on std and interquartile range: . The STD of 19.957504689286747 makes sense considering our small Mode, Median, and larger outliers to the right. The standard deviation calculates the distance between every data point so the large outliers skewed this number to be larger. | The interquartile range of 3.0 also makes sense as our most of our data has smaller frequency, and the plot is heavily skewed left, so the interquartile range signifies that most of our data are close together in distance. The interquartile range calculate the distance between the 50% middle data points, so in terms of the distribution of our histogram, this value makes sense. | . Foray into machine learning . Import scikit-learn&#39;s example diabetes dataset as a Panda&#39;s dataframe with the following code: from sklearn import datasets df = datasets.load_diabetes(as_frame=True) features_df = df.data target_df = df.target | Use the following code to view a description of the dataset: print(df.DESCR) | Do some exploratory data analysis of the features, including getting summary statistical information | Find the column in features_df that has the highest correlation coefficient with the target values in target_df | Make a scatter plot of the target values vs this feature column&#39;s values and comment on how the plotted points match up with the correlation coefficient | Using this feature and target, perform linear regression with sklearn&#39;s LinearRegression | Print the coefficients of the model | Plot the linear fit on top of the scatter plot | Calculate (or output) the mean squared error and R-squared values for your fit | Try doing linear regression with another variable and check how the new fit&#39;s mean squared error and R-squared values change. | . from sklearn import datasets df = datasets.load_diabetes(as_frame=True) features_df = df.data target_df = df.target . print(df.DESCR) . .. _diabetes_dataset: Diabetes dataset - Ten baseline variables, age, sex, body mass index, average blood pressure, and six blood serum measurements were obtained for each of n = 442 diabetes patients, as well as the response of interest, a quantitative measure of disease progression one year after baseline. **Data Set Characteristics:** :Number of Instances: 442 :Number of Attributes: First 10 columns are numeric predictive values :Target: Column 11 is a quantitative measure of disease progression one year after baseline :Attribute Information: - age age in years - sex - bmi body mass index - bp average blood pressure - s1 tc, total serum cholesterol - s2 ldl, low-density lipoproteins - s3 hdl, high-density lipoproteins - s4 tch, total cholesterol / HDL - s5 ltg, possibly log of serum triglycerides level - s6 glu, blood sugar level Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1). Source URL: https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html For more information see: Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) &#34;Least Angle Regression,&#34; Annals of Statistics (with discussion), 407-499. (https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf) . Exploratory Data Analysis . features_df.describe() . age sex bmi bp s1 s2 s3 s4 s5 s6 . count 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | . mean -3.634285e-16 | 1.308343e-16 | -8.045349e-16 | 1.281655e-16 | -8.835316e-17 | 1.327024e-16 | -4.574646e-16 | 3.777301e-16 | -3.830854e-16 | -3.412882e-16 | . std 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | . min -1.072256e-01 | -4.464164e-02 | -9.027530e-02 | -1.123996e-01 | -1.267807e-01 | -1.156131e-01 | -1.023071e-01 | -7.639450e-02 | -1.260974e-01 | -1.377672e-01 | . 25% -3.729927e-02 | -4.464164e-02 | -3.422907e-02 | -3.665645e-02 | -3.424784e-02 | -3.035840e-02 | -3.511716e-02 | -3.949338e-02 | -3.324879e-02 | -3.317903e-02 | . 50% 5.383060e-03 | -4.464164e-02 | -7.283766e-03 | -5.670611e-03 | -4.320866e-03 | -3.819065e-03 | -6.584468e-03 | -2.592262e-03 | -1.947634e-03 | -1.077698e-03 | . 75% 3.807591e-02 | 5.068012e-02 | 3.124802e-02 | 3.564384e-02 | 2.835801e-02 | 2.984439e-02 | 2.931150e-02 | 3.430886e-02 | 3.243323e-02 | 2.791705e-02 | . max 1.107267e-01 | 5.068012e-02 | 1.705552e-01 | 1.320442e-01 | 1.539137e-01 | 1.987880e-01 | 1.811791e-01 | 1.852344e-01 | 1.335990e-01 | 1.356118e-01 | . features_df[features_df.columns[:]].hist(figsize=(20, 20)) . array([[&lt;AxesSubplot:title={&#39;center&#39;:&#39;age&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;sex&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;bmi&#39;}&gt;], [&lt;AxesSubplot:title={&#39;center&#39;:&#39;bp&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;s1&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;s2&#39;}&gt;], [&lt;AxesSubplot:title={&#39;center&#39;:&#39;s3&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;s4&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;s5&#39;}&gt;], [&lt;AxesSubplot:title={&#39;center&#39;:&#39;s6&#39;}&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;]], dtype=object) . Find column with highest correlation . col=list(features_df.columns) df2=features_df.copy() df2[&quot;target&quot;] = list(target_df.values) for c in col: print(df2[[c,&#39;target&#39;]].corr()) . age target age 1.000000 0.187889 target 0.187889 1.000000 sex target sex 1.000000 0.043062 target 0.043062 1.000000 bmi target bmi 1.00000 0.58645 target 0.58645 1.00000 bp target bp 1.000000 0.441484 target 0.441484 1.000000 s1 target s1 1.000000 0.212022 target 0.212022 1.000000 s2 target s2 1.000000 0.174054 target 0.174054 1.000000 s3 target s3 1.000000 -0.394789 target -0.394789 1.000000 s4 target s4 1.000000 0.430453 target 0.430453 1.000000 s5 target s5 1.000000 0.565883 target 0.565883 1.000000 s6 target s6 1.000000 0.382483 target 0.382483 1.000000 . Column with highest correlation to target_df is bmi. . Scatter plot . df2.plot.scatter(y=&#39;target&#39;,x=&#39;bmi&#39;) . &lt;AxesSubplot:xlabel=&#39;bmi&#39;, ylabel=&#39;target&#39;&gt; . Comment on scatter plot: . The plotted points does show somewhat of a linear trend upward that matches up with the correlation coefficient. | We can vaguely observe a diagonal line through the points | . Linear Regression . import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score . X = np.array(df2[&#39;bmi&#39;]) y = np.array(df2[&#39;target&#39;]) reg = LinearRegression().fit(X.reshape(-1, 1), y) . Coefficient . coef = reg.coef_ coef . array([949.43526038]) . Linear fit . ytrain = reg.intercept_ + reg.coef_ * X . plt.plot(X,y,&#39;ro&#39;,X,ytrain,&#39;b-&#39;); . Calculate Mean-Squared-Error and R^2 . mean_squared_error(y, ytrain) . 3890.4565854612724 . r2_score(y, ytrain) . 0.3439237602253803 . Linear Regression with s5 . df2.plot.scatter(y=&#39;target&#39;,x=&#39;s5&#39;) . &lt;AxesSubplot:xlabel=&#39;s5&#39;, ylabel=&#39;target&#39;&gt; . X = np.array(df2[&#39;s5&#39;]) y = np.array(df2[&#39;target&#39;]) reg = LinearRegression().fit(X.reshape(-1, 1), y) . ytrain = reg.intercept_ + reg.coef_ * X . plt.plot(X,y,&#39;ro&#39;,X,ytrain,&#39;b-&#39;); . mean_squared_error(y, ytrain) . 4030.9931334683297 . r2_score(y, ytrain) . 0.32022405096453443 . Comment on the new variable and how mse and R^2 changed: . The new model using s5 returns a higher mean squared error with a lower r^2 score. | This makes sense as &#39;s5&#39; still have a lower correlation coefficient than mbi, so it explains the larger error and smaller accuracy between predicted and actual y values. | I chose s5 because it has the next highest correlation coefficient out of all the other variables, and we can also see a positive correlation look at the plots. However, since it is lower than mbi, it signifies that mbi would be a better feature to train the linear regression model. | .",
            "url": "https://anhmvc.github.io/dh140-blog/2022/03/15/Assignment07.html",
            "relUrl": "/2022/03/15/Assignment07.html",
            "date": " • Mar 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://anhmvc.github.io/dh140-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://anhmvc.github.io/dh140-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://anhmvc.github.io/dh140-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://anhmvc.github.io/dh140-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}